19/06/2023
=========

AWS

- Firewall
	- Default is all 
	- Can limit to certain IP address, for the below reasons:
		- Communication between microservices
		- Company proxy settings
	- This is done by infrastructure engineers.

6 cloud computing features:
- https://docs.aws.amazon.com/whitepapers/latest/aws-overview/six-advantages-of-cloud-computing.html

EC2 Instance panel:
- IP address two types: Public and private
	- Public: Exposed to internet
	- Private: You can ping it.
- Select 'security'
	- Now seect 'Security Group'
	- Select 'Edit inbound rules'
	- Port range is 22 as that is the default port for SSH.
		- But you can create 'Type' = 'All traffic'
	- NOTE: YOU NEED TO OPEN INDIVIDUAL PORTS IN ORDER TO ACCESS IT VIA BROWSER, e.g. Jenkins uses port 8080 so you need to configure security group to add inbound rule accepting 'TCP' traffic to port range = 8080.
- Back to main panel: Select 'connect'
	- Then select 'SSH client' (the third tab)
	- Copy the SSH command and paste in your terminal.
	- Troubleshooting
		- If 'connection timed out', then the network you are on is limiting outbound requests to certain sites.
- Public IP address:
	- In instance page 'Public IPv4 address' section.
	- This is used to access your instance via browser.
	- To access a particular service, you need to also specify the port number of the IP address, e.g. for Jenkins 'https://52.56.90.177:8080/'.
- Every time you stop and re-launch an instance, the IP address changes (if you're on free tier).
	- Paiid tier allows for persistent IP address.


================
Java setup
- Once you have your instance set up, install the following:
	- Java 11 (this version specifically because
	- Maven
	- Jenkins
	- Tomcat 9

===============
Install Java
- sudo add-apt-repository ppa:openjdk-r/ppa
- sudo apt-get update
- sudo apt-get install -y openjdk-11-jdk

Set JAVA_HOME
- sudo echo "JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\"" >> /etc/profile
- sudo echo "PATH=\$JAVA_HOME/bin:\$PATH" >> /etc/profile
- source /etc/profile

===========
Install Maven

cd /tmp ; wget https://downloads.apache.org/maven/maven-3/3.9.0/binaries/apache-maven-3.9.0-bin.tar.gz

cd /tmp ; sudo tar -xzf apache-maven-3.9.0-bin.tar.gz -C  /opt/

mv /opt/apache-maven-3.9.0 /opt/maven

sudo echo "MAVEN_HOME=\"/opt/maven\"" >> /etc/profile

sudo echo "PATH=\$MAVEN_HOME/bin:\$PATH" >> /etc/profile

source /etc/profile

===========
Install Jenkins

sudo wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo echo deb https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list
sudo apt-get update
sudo apt-get install jenkins

===========
Start Jenkins server:


sudo systemctl start jenkins

(To check Jenkins status:) sudo systemctl status jenkins

Accessing Jenkins server:
- Go to AWS instance's public IP address, and add the port number (in Jenkin's case, it is 8080) - http://52.56.90.177:8080/
- You need Jenkins password to access the setup wizard via browser (use EC2 instance's public IP address).
	- Username is 'admin'
	- sudo cat /var/lib/jenkins/secrets/initialAdminPassword


Jenkins can automatically pull github repos and launch it.

======
Install Tomcat server
- wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz -P /tmp
- cd /tmp ; tar -xzf /tmp/apache-tomcat-9.0.73.tar.gz -C /opt
- mv /opt/apache-tomcat-9.0.73 /opt/tomcat

Configure Tomcat server
- You must change the port number as the default is 8080 which is already taken by Jenkins.
- In /opt/tomcat/conf/server.xml, change:
	<Connector port="8085" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
Enable port for AWS instance
- edit inbound security rules in 'security groups'

Start Tomcat server
- START: /opt/tomcat/bin/startup.sh

- VALIDATE: ps -ef|grep tomcat

Add Tomcat users
	
	<tomcat-users>
	
	
	 <role rolename="manager-gui"/>
	  <role rolename="manager-script"/>
	  <user username="tomcat" password="password" roles="manager-gui,manager-script"/>
	  <user username="kpashindla" password="password" roles="manager-gui,manager-script"/>
	
	
	</tomcat-users> 

Enable Manager access
- Edit: /opt/tomcat/webapps/manager/META-INF/context.xml
	
	<Context antiResourceLocking="false" privileged="true" >
	  <CookieProcessor className="org.apache.tomcat.util.http.Rfc6265CookieProcessor"
	                   sameSiteCookies="strict" />
					   
					   
	  <!-- 
	      THIS NEEDS TO BE COMMENTED OUT
	
		<Valve className="org.apache.catalina.valves.RemoteAddrValve"
			allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /> 
	  -->
	  
	  <Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"/>
	
	
	</Context>





======
What is Jenkins pipeline?
- Steps:
	- First: Compilation
	- Second: Code review (e.g. linting, warning tools)
	- Third: Testing 
	- Fourth: Code coverage
	- Finally: Deployment



- Select 'Freestyle project'

Invoke top level Maven targets
YOU HAVE TO SET THE GOAL (the left hand value): 
	'Compile': Runs 'mvn compile'
	Code review
	'Test': mvm test
	'Packaging': 'war' or 'jar' (YOU MUST add the 
	<packaging>war</package>
	tag in your pom.xml file. This is because Jenkins does not know it is a war file, but Spring boot does.
	)
	Install: mvn clean
	Deploy: mvm deploy


Build triggers:
- Most of the time, choose 'build after other prjects are build', then in 'project to watch' enter the previous job.
- Github hook trigger 
- Poll SCM:
	- can specify schedule:
		- Format: 5/H * * * (this is called 'cron' job like the UNIX utility)

Post build actions:
- Record code coverage report, test results etc etc.


you need to add plugin to deploy the project compiled by Jenkins to Tomcat server
- Search in 'plugin' - 'deploy to container' (container means server)
- In post build, select 'deploy war/ear to container'
- Add content path (the directory), e.g. 'webapptest' will point to 44.211.134.203:8085/webapptest/
- in 'containers' choose 'Tomcat 9.x remote'
	- You need to add credentials (see above 'Tomcat users')
	- IT IS SUGGESTED you add a unique ID reference, so you can reuse this identifier in other parts of the pipeline.

Groovy:
- Instead of manually configuring Jenkins pipeline, you can write declarative scripts.