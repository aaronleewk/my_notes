30/05/2023
==========
Spring JPA vs JDBC
- What is JDBC API?
	- It is an interface between Java application and the database.
	- It requires a series of steps to set up; this is 'boilerplate code'!
		- Install driver
		- Set up driver manager 
		- Open connection
		- Close connection
- Spring JDBC reduces boilerplate code:
	- e.g. no need to manually close connection.
- But you still need to write raw SQL. Compare to:

Spring Data JPA (Java Persistence API)
- Offers various interfaces to repositories, e.g.
	- CrudRepository
	- PagingAndSortingRepository
	- JpaRepository
- Remember, interfaces are pure abstraction
	- So JPA is used to abstract away the persistence logic, i.e. developers do not need to write SQL queries.
- You can focus on the higher layers instead of coding the DAO.


Spring JDBC demo:
- 'application.properties' file is the config file Spring reads from; it contains connection properties such as username, passwords etc.
	- This means you don't have to manually write the 'utilities.connection' class with the connection url and its try-catch blocks. 
	- You can just declaratively state the attributes in the config file"
	
	==========
	// application.properties
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost/test
	spring.datasource.username=root
	spring.datasource.password=

	server.port=8081
	==========
	// Models
	public class Employee {
		
		private int employeeId;
		private String firstName;
		private String lastName;
		private String emailId;
		private String password;

		public Employee() {
			super();
		}
		

		public Employee(String firstName, String lastName, String emailId, String password) {
			super();
			this.firstName = firstName;
			this.lastName = lastName;
			this.emailId = emailId;
			this.password = password;
		}

		public Employee(int employeeId, String firstName, String lastName, String emailId) {
			super();
			this.employeeId = employeeId;
			this.firstName = firstName;
			this.lastName = lastName;
			this.emailId = emailId;
		}

		public Employee(int employeeId, String firstName, String lastName, String emailId, String password) {
			super();
			this.employeeId = employeeId;
			this.firstName = firstName;
			this.lastName = lastName;
			this.emailId = emailId;
			this.password = password;
		}

		public int getEmployeeId() {
			return employeeId;
		}


		public void setEmployeeId(int employeeId) {
			this.employeeId = employeeId;
		}

		public String getFirstName() {
			return firstName;
		}

		public void setFirstName(String firstName) {
			this.firstName = firstName;
		}

		public String getLastName() {
			return lastName;
		}

		public void setLastName(String lastName) {
			this.lastName = lastName;
		}

		public String getEmailId() {
			return emailId;
		}

		public void setEmailId(String emailId) {
			this.emailId = emailId;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		@Override
		public String toString() {
			return "Employee [employeeId=" + employeeId + ", firstName=" + firstName + ", lastName=" + lastName
					+ ", emailId=" + emailId + ", password=" + password + "]";
		}
		
	}

	==========
	//From DAO to SpringApplication:
	//DAO
	public class EmployeeDAOSpringImpl implements EmployeeDAO{
		@Autowired
		private JdbcTemplate jdbcTemplate; // This comes with Spring JDBC

		public Employee registerEmployee(Employee employee){
			String sqlQuery = "INSERT INTO employee(x,y,z) VALUES (?,?,?)";

			int i = jdbcTemplate.update(sqlQuery, new object[]){
						employee.getEmailId(),
						employee.getFirstName(),
						employee.getLastName()
					}

			if(i>0) return employee;
			else return null;
			
			// Notice no try-catch blocks!
			// Also no DatabaseConnection class because of the 'application.properties' file.
		}

		public List<Employee> listAllEmployee(){
		
			String sqlQuery = "SELECT * FROM employees";

			return jdbcTemplate.queryForOjbect(sqlQuery, new MyRowMapper());
			// Uses the below nested class 'MyRowMapper'
			
		}

		// NOTE nested class: Only exists to serve the parent class.
		public class MyRowmapper implements RowMapper<Employee>{
			public Employee mapRow(ResultSet rs, int rowNum) throws SQL Exception{
				return new Employee(rs.getInt(1). rs/getString(2), rs.getString(3));
			}
		}
	}
	=========
	// Service layer

	@Service
	public class EmployeeServiceImpl implements EmployeeService {

		@Autowired
		private EmployeeDAO employeeDAO;
		
		// Dependency Injection - DI Point
		public EmployeeServiceImpl(EmployeeDAO employeeDAO) {
			
			this.employeeDAO = employeeDAO;
		}
		

		@Override
		public Employee registerEmployee(Employee employee) {
			
			return this.employeeDAO.registerEmployee(employee);
		}

		@Override
		public Employee employeeLogin(String emailId, String password) {
			
			return this.employeeDAO.employeeLogin(emailId, password);
		}

	}

	=========
	// Controller layer

	@Controller
	public class EmployeeController {
		
		@Autowired
		private EmployeeService employeeService;

		@GetMapping("/")
		public String home() {
			System.out.println("This is from get mapping!!!");
			return "home";// This string represent the name of the "view"
		}
		
		/* @PostMapping("/register")
		public String registerProcess(@RequestParam("employeeId") int employeeId, 
									@RequestParam("firstName") String firstName,
									@RequestParam("lastName") String lastName,
									@RequestParam("emailId") String emailId,
									@RequestParam("password") String password
									) {
			System.out.println("Registration is under process!!!");
			
			Employee e = new Employee(employeeId,firstName,lastName,emailId,password);
			
			System.out.println(e);
			
			return "home";// This string represent the name of the "view"
		}
		
		*/
		@PostMapping("/register")
		public String registerProcess2(@ModelAttribute Employee employee) {
			
			System.out.println(employee);
			
			Employee registerEmployee =  employeeService.registerEmployee(employee);
			
			
			
			if(registerEmployee!=null)
				return "home";// If registration is successfull go to home page
			else
				return "register";
		}
		
	}
	=========
	// Main method; 'CommandLineRunner' runs that method's code before app startup.

	@SpringBootApplication
	public class SpringJDBC Demo implements CommandLineRunner{

		@Autowired
		private EmployeeDAOSpringJDBCImpl employeeDAOSpringJDBCImpl;
		
		public static void main(String[] args) {
			SpringApplication.run(SpringMvcJdbcDemoApplication.class, args);
		}

		@Override
		public void run(String... args) throws Exception {
			
			/*Employee e1 = new Employee(1000,"Tom","H","t@hotmail.com","1111");
			
			Employee registeredEmployee = employeeDAOSpringJDBCImpl.registerEmployee(e1);
			
			if(registeredEmployee != null) {
				System.out.println("Registration Succcessful");
			}
			else {
				
				System.out.println("Registration UnSucccessful");
			} */
			
			
	//		Employee e = employeeDAOSpringJDBCImpl.employeeLogin("kpashindla", "1234");
	//		
	//		if(e != null) {
	//			
	//			System.out.println("Login Success");
	//			
	//		}
	//		else {
	//			System.out.println("User Invalid!!");
	//		}
	//		
			
			//System.out.println(employeeDAOSpringJDBCImpl.listAllEmployee());
		}

	}



Compare to:

	Spring JPA demo:
	========
	// In application.properties
	spring.jpa.hibernate.ddl-auto=create // This drops then re-creates ALL tables whenever the application runs
	spring.jpa.hibernate.ddl-auto=update // This is suggested; DDL stands for 'data definition language'
	spring.jpa.show-sql=true

	// For monolithic webpage:
	spring.mvc.view.prefix=/WEB-INF/view/
	spring.mvc.view.suffix=.jsp
	========
	// Entities
	
	import jakarta.persistence.Column;
	import jakarta.persistence.Entity;
	import jakarta.persistence.GeneratedValue;
	import jakarta.persistence.Id;

	@Entity
	//@Table(name="customer_details")
	public class Customer {
		
		@Id // This annotation represents PK 
		@GeneratedValue // this represents AI
		private int customerId;
		
		private String customerName;
		
		private String customerEmail;
		
		private String password;

		public Customer() {
			super();
		}

		public Customer(int customerId, String customerName, String customerEmail, String password) {
			super();
			this.customerId = customerId;
			this.customerName = customerName;
			this.customerEmail = customerEmail;
			this.password = password;
		}

		public int getCustomerId() {
			return customerId;
		}

		public void setCustomerId(int customerId) {
			this.customerId = customerId;
		}

		public String getCustomerName() {
			return customerName;
		}

		public void setCustomerName(String customerName) {
			this.customerName = customerName;
		}

		public String getCustomerEmail() {
			return customerEmail;
		}

		public void setCustomerEmail(String customerEmail) {
			this.customerEmail = customerEmail;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		@Override
		public String toString() {
			return "Customer [customerId=" + customerId + ", customerName=" + customerName + ", customerEmail="
					+ customerEmail + ", password=" + password + "]";
		}
		
	}

	========
	//Repository
	import com.ab.entities.Customer;

	@Repository
	public interface CustomerRepository extends JpaRepository<Customer, Integer> {
	
		
	}

	========
	@Service
	public class CustomerServiceImpl implements CustomerService{
	
		@Autowired
		private CustomerRepository customerRepository;

		@Override
		public Customer registerCustomer(Customer customer) {
			
			return customerRepository.save(customer);
		}

		@Override
		public List<Customer> loadAllCustomers() {
			
			return customerRepository.findAll();
		}

	}
	========
	import org.springframework.web.servlet.ModelAndView;

	@Controller
	public class CustomerController {
		
		@Autowired
		private CustomerService customerService;
		
		
		// Request Mapping Methods
		
		@GetMapping("/register")
		public String register() {
			
			return "register";
		}
		
		
		@PostMapping("/register")
		public String registerProcess(@ModelAttribute Customer customer) {
			
			Customer c = customerService.registerCustomer(customer);
			
			if(c != null)
				return "login";
			else
				return "register";
		}
		
		
		
		@GetMapping("/customers")
		public ModelAndView findAllCustomers() {
			
			ModelAndView mv = new ModelAndView();

			mv.addObject("customerList", customerService.loadAllCustomers());
			
			mv.setViewName("customer_list");
			
			return mv;
			
		}
	}
	========
	// This is what ModelAndView is for:
	// Is basically the same as 'setAttribute' and then 'getRequestDispatcher'

	<%@page import="com.ab.entities.Customer"%>
	<%@page import="java.util.List"%>
	<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
		pageEncoding="ISO-8859-1"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="ISO-8859-1">
	<title>Insert title here</title>
	</head>
	<body>
	<h1> Registered Customer List </h1>
	
	<%
		List<Customer> customers = (List<Customer>)request.getAttribute("customerList");
	
	%>
	
	
	<%= customers %>
	
	</body>
	</html>
	========
	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;

	@SpringBootApplication
	public class SpringBootMvcJpaDemoApplication {

		public static void main(String[] args) {
			SpringApplication.run(SpringBootMvcJpaDemoApplication.class, args);
		}

	}

Spring architecture:
Servlet -> controllers -> services -> repositories (either set up automatically by JPA; or manually by JDBC) -> database
- Spring uses DispatcherServlet; it acts as a proxy for ALL server requests. 
- Developers are only responsible for coding up the 'controller' and the 'service' layers (their names will be different; see below).

Spring MVC
- So MVC in the Spring framework works like this:
	- Front controller (the DispatcherServlet) is provided by Spring (this is the 'servlet' layer).
		- It will send the client request to the appropriate controller (which has the '@GetMappping' annotation. See below:)
	- User-defined controllers (aka backend controllers) are coded by developers. They are defined by the '@Controller' and '@RestController' annotation.
	- View is defined by JSP or HTML with React/Angular
	- Models are just Java classes.

	=======
	@Controller
	public class EmployeeController{
		@GetMapping("/")
		public String home(){
			return "home"; // This string represents the 'view'
		}

		// For more efficient code:
		@PostMapping("/register")
		public String registerProcess(@ModelAttribute Employee employee){ // The HTML attribute names MUST match the class attribute names; also the class MUST contain setter methods for each attribute
			Employee registerEmployee = employeeService.registerEmployee(employee);
			if(registerEmployee != null) return "home"; 
			else return "register";
		}

	}

	======
	// Entities are ORM objects
	@Entity
	//@Table(name="customer_details" for custom table name that is not class name)
	public class Customer{
		@Id
		@GeneratedValue // For autogenerated primary keys
		private int customerId; // Every entity class MUST contain primary key column

		private String customerEmail;

		private String customerFirstName;

		public Customer(int customerId, String customerEmail, String customerFirstName){

		}
		public void setEmail(){

		} 

	}

	// Bridge tables are special entities

	=====

	public class CustomerService{
		@Autowired
		private CustomerRepository customerRepository;

		public registerCustomer(Customer customer){
			return customerRepository.save(customer);
		}
	}

	=====
	import com.ab.entities.Customer

	@Repository
	public interface CustomerRepository extends JpaRepository<Customer, Integer>{ // NOTE 'Integer' must be an object for JpaRepository

		// The below methods are all from JpaRepository interface

		save

		findAll
	}

======
API Creation
Web application vs web service:
- Web application: The user interface; the focus is on USER CONSUMPTION. Frontend developers do this.
- Web service: Serves data. Focus is APPLICATION CONSUMPTION, whether it is web or mobile apps. Backend developers do this.

Types of web services:
- SOAP based (Simple Object Access Protocol)
	- 'Protocol' means you have to defined everything - the operations, style etc.
	- Response can ONLY be sent using XML.
- REST based (Representational State Transfer)
	- NOT a protocol
	- Lightweight compared to SOAP; does not enforce restrictions on the format of your response data. It can be in XML, JSON, plain text etc. 

Rapid application development (RAD)

HTTP 
- Response codes: https://www.restapitutorial.com/httpstatuscodes.html
-
=======
Example REST API

	=====
	// application.proerties

	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost/test
	spring.datasource.username=root
	spring.datasource.password=

	server.port=8081

	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.show-sql=true

	=====
	// Entity
	import jakarta.persistence.Entity;
	import jakarta.persistence.Id;

	@Entity
	public class Product {
		
		@Id
		private int productId;
		
		private String productTitle;
		
		private double productPrice;

		public Product() {
			super();
		}

		public Product(int productId, String productTitle, double productPrice) {
			super();
			this.productId = productId;
			this.productTitle = productTitle;
			this.productPrice = productPrice;
		}

		public int getProductId() {
			return productId;
		}

		public void setProductId(int productId) {
			this.productId = productId;
		}

		public String getProductTitle() {
			return productTitle;
		}

		public void setProductTitle(String productTitle) {
			this.productTitle = productTitle;
		}

		public double getProductPrice() {
			return productPrice;
		}

		public void setProductPrice(double productPrice) {
			this.productPrice = productPrice;
		}

		@Override
		public String toString() {
			return "Product [productId=" + productId + ", productTitle=" + productTitle + ", productPrice=" + productPrice
					+ "]";
		}
		
	}

	=====
	// Repository

	import org.springframework.data.jpa.repository.JpaRepository;
	import org.springframework.data.jpa.repository.Modifying;
	import org.springframework.data.jpa.repository.Query;
	import org.springframework.data.repository.query.Param;
	import org.springframework.stereotype.Repository;

	import jakarta.transaction.Transactional;

	@Repository
	public interface ProductRepository extends JpaRepository<Product,Integer>{
		
		@Modifying
		@Transactional
		@Query("UPDATE Product p SET p.productTitle = :pTitle WHERE p.productId = :id ") // MUST use JPQL (Java Persistence Query Language) 
		public int updateProductById(@Param("pTitle") String productTitle,@Param("id") int productId);

		
		@Query("SELECT p FROM Product p WHERE productPrice = :price ")
		public List<Product> listProductsByPrice(@Param("price") double productPrice);


	}
	=====
	// Service
	@Service
	public class ProductServiceImpl implements ProductService{
		
		
		@Autowired
		private ProductRepository productRepository;
		
		
		@Override
		public List<Product> listProducts() {
			
			return productRepository.findAll();
		}

		@Override
		public Optional<Product> listProductById(int productId) {
			
			return productRepository.findById(productId);
		}

		@Override
		public int deleteProductById(int productId) {
			productRepository.deleteById(productId);
			return 1;
		}

		@Override
		public Product addProduct(Product product) {
			return productRepository.save(product);
		}

		@Override
		public int updateProduct(Product product) {
			return productRepository.updateProductById(product.getProductTitle(), product.getProductId());
		}

		@Override
		public List<Product> listProductsByPrice(double productPrice) {
			
			return productRepository.listProductsByPrice(productPrice);
		}

	}

	=====
	// Controller
	import org.springframework.http.HttpStatus;
	import org.springframework.http.HttpStatusCode;
	
	import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;

	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.RequestBody;

	import org.springframework.web.bind.annotation.RestController;
	import org.springframework.http.ResponseEntity;

	
	@RestController
	public class ProductController {
		
		@Autowired
		private ProductService productService;
		
		// RESTful mapping methods, so just data, no JSP
		
		@GetMapping("/products")
		public ResponseEntity<List<Product>> listProducts(){
		
			return new ResponseEntity<>(productService.listProducts(),HttpStatus.ACCEPTED);
			
		}

		// vs

		@GetMapping("/products")
		public Optional<List<Product>> listProducts(){
			return productService.listProducts();
		}
		
		// / Best practice is not to return Java object, in the above case 'Product', but to wrap it in a 'ResponseEntity' which represents the whole HTTP response: status code, headers, and body.
		
		// ======
		@PostMapping("/products")
		public Product addNewProduct(@RequestBody Product product) {
			
			return productService.addProduct(product);
		}
		
		// vs
		
		@PostMapping("/products")
		public ResponseEntity<Product> addNewProduct(@RequestBody Product product) { // / automatic deserialization of the inbound HttpRequest body into a Java object
			
			System.out.println("*******************************");
			Product storedProduct = productService.addProduct(product);
			return new ResponseEntity<Product>(storedProduct,HttpStatus.CREATED);
		}
		
		// ======

		@GetMapping("/products/{productId}")
		public Optional<Product> listProductById(@PathVariable("productId") int productId){
			
			return productService.listProductById(productId);
			
		}
		
		@DeleteMapping("/products/{id}")
		public int deleteProductById(@PathVariable("id") int productId) {
			
			return productService.deleteProductById(productId);
		}
		
		
		@PutMapping("/products/product")
		public int updateProductById(@RequestBody Product product) {
			
			return productService.updateProduct(product);
		}
		
		
		@GetMapping("/products/product/{price}")
		public List<Product> updateProductById(@PathVariable("price") double productPrice) {
			
			return productService.listProductsByPrice(productPrice);
		}
		
	}


	=======
// Additional stuff



	@MappedSuperclass // Will not create table for superclass; superclass is only there to supply common fields.
	public class ElectornicDevice{
		@Id
		private string id;
	}

	@Entity
	public class MobilePhone extends ElectronicDevice{

		private String model;

		@ManyToOne
		@JoinColumn(name="owner_id")
		private int ownerId;
	}

	@Entity
	public class Owner {
		@Id
		private int ownerId;

		@OneToMany(mappedBy = "ownerId")
		private List<MobilePhone> phones;

		@Embedded
		private Address address;

	}

	@Embeddable // Spring JPA will not create a separate table for this class. Instead this entity can be injected into other entities.
	public class address{

	}

	@Entity
	@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
	public class Vehicle{
		@Id
		private int vehicleId;

		private String vehicleName;
	}

