Databases
===========
1. What is a file?
- An abstraction; it is a container for data to be managed by the file system.

2. What is a file system?
- When data is created, it is stored in memory. Persistence is achieved via the file system's functions.

3. Resources:
- Concepts: https://cseweb.ucsd.edu/classes/sp16/cse120-a/applications/ln/lecture15.html
- Cloud/distributed systems: https://www.hopsworks.ai/post/scalable-metadata-the-new-breed-of-file-systems
- Further progress: https://www.filesystems.org/

4 What is a database?
- Provides an interface to one or more database models, e.g. hierarchical; network; entity-relationship
- In a database model, data has structured (i.e. have relationships)
- There are also extra features such as ACID, redundancy

5. Relational data model
- Implements (some) normalisation principles to allow for relational operations.

6. Non-relational data

7. Database design stages - the Peter Chen method for entity-relationship diagrams
- Conceptual model (e.g. objects and their relations)
- Logical model (e.g. tables and their columns/attributes) (user-level implementation)
- Physical model (DBS implementation) (e.g. the types of columns, primary/foreign keys)

8. Unnormalised vs de-normalised data
- Unnormalised data is normalised to reduce data redundancy and improve data integrity (see more below on types of integrity).
- De-normalisation is used to improve read performance, at the expense of losing some write performance. It achieves this by adding redundant copies of data or by grouping data.
- Data warehouses uses de-normalisation principles.

9. Normalisation forms
- 1NF: One cell has one value (so no storing multiple emails)
- 2nF: Primary key is only from one column (i.e. no need to combine columns to generate the primary key)
- 3NF: Within the non-primary attributes, there should not be semantic relationship between any of the items, e.g. NAME;COUNTRY;STATE -> SAMRAT;INDIA;PUNJAB; COUNTRY;STATE is a relationship. This is because within the semantic relationship, there might be a one-to-many relationship (e.g. INDIA;PUNJAB - INDIA;GUJARAT). Separation reduces duplicate data (i.e. repeating the ame country and state many times) and also makes searching easier (instead of looking through each row, you can just start at the separate table and look at its links). 3NF is implemented through foreign keys, e.g. NAME;COUNTRY;COUNTRY ID -> COUNTRY;STATE. 

10. Transactions
- One single unit of work
- The LIFECYCLE of a transation:
- Database transactions should be ACID:
	- Atomicity: All sub-steps in the procedure must be successful.
	- Consistency: Everything should be consistent within the database, e.g. when Â£500 is moved from one account to another, the tables representing the two different accounts should be updated at the same time. A transaction brings the database from one state to another IN ONE STEP. This is of particular concern when concurrency is introduced (see 'Isolation')
	- Isolation/Concurrency control: Ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially.
	- Durability: Guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash)
- Use-cases of transactions:
	- Overkill for single row updates; essential for multiple updates.
	- when updating/deleting stuff 

	--- transaction  begin

		BEGIN TRANSACTION ;

		UPDATE tableX 
		SET Balance = Balance + 100
		WHERE id = 42 ;

		UPDATE tableX 
		SET Balance = Balance - 100
		WHERE id = 73 ;

		COMMIT TRANSACTION ;

	--- transaction  end

11. Querying 
- CRUD operations(Create, Read, update, Delete)
- Data definition operators
	- CREATE, ALTER, DROP, TRUNCATE
- Data manipulation operators
	- SELECT, UPDATE, INSERT, DELETE
	- SELECT is DML because for 'SELECT ... INTO form' or 'SELECT <subcolumns> FROM' u, data is manipulated.
	- DELETE allows for WHERE conditional in removing rows; TRUNCATE empties all rows. Also, DELETE shows up in transaction logs so you can still roll it back; TRUNCATE does not and is permanent. 

- Data control operators
	- Gives user administrative control over the DMS
	- GRANT, REVOKE
- Transaction control operators (see above)
	- COMMIT, ROLLBACK,SAVEPOINT

12. RDMS table design
- Primary key: Unique record identifier; helps maintain ENTITY integrity.
- Foreign key: An attribute within a table that links to another table; helps maintain REFERENTIAL integrity. Can be null; forieng key simply requires that the value in that field must exist first in a parent table. Null by definition is not a value; it could be that we do not yet know what the value is.
- Composite key: A key that is comprised of multiple attributes. See: https://dzone.com/articles/mysql-the-problem-with-synthetic-primary-keys
- Unique key: An attrbitue that uniquely identifies records in another table. CAN ACCEPT NULL. An example is a 'Natural key': Used to give contextual meaning, e.g. stock ticker GOOGL in a NYSE table. Contrast this with 'Surrogate key' (aka 'synthetic' PRIMARY key), which is a key that is manufactured artificially and used to satisfy the requirement that each entity needs a unique representation (sometimes a column can be UNIQUE, but because UNIQUE is NULLABLE it cannot be used as a primary key.
- Primary vs unique key: Primary keys cannot be changed, whereas unique keys (such as passport number) can be changed. Also the primary key by default creates clustered index. Whereas tje unique key by default creates a non-clustered index.

13. EF Codd rules

======================================================================
19/04/2023
Data integrity 
- Achieved by using constraints and triggers.
- Especially important when using data modification operators.
- See: https://www.c-sharpcorner.com/blogs/data-integrityin-sql-server

SQL Constraints
1. Entity Integrity examples:
- PRIMARY KEY
- UNIQUE

2. Referential inntegrity examples:
- FOREIGN KEY
- NOT NULL
- CHECK
- DEFAULT

2. Syntax
- Defined at the end of a statement:
CREATE table employee(
	job_id int,
	job_title varchar(20),
	CONSTRAINT pk_job_id PRIMARY KEY(job_id),
	CONSTRAINT fk_job_title FOREIGN KEY(job_title)
	REFERENCES roles(title)
);

CREATE table roles(
	title varchar(20),
	rate_hourlly int,
	CONSTRAINT PRIMARY KEY(title)
);

ALTER table roles ADD CONSTRAINT constraint_1 CHECK(rate_hourly <= 60);


Referential Integrity
- See: https://learn.microsoft.com/en-us/sql/relational-databases/tables/primary-and-foreign-key-constraints?view=sql-server-ver16
- https://www.sqlshack.com/delete-cascade-and-update-cascade-in-sql-server-foreign-key/

REFERENCES
ON UPDATE
ON DELETE
(UNLESS there is a TRIGGER)

_____

SQL joins
________________________
SQL GROUP BY and Functions 

Aggregate functions:
- Very useful when used with GROUP BY clause
- AGGREGATE(function_num, options, array, [k])
- Function numbers: 
	1 : AVERAGE
	2 : COUNT
		etc
- You can also create custom aggregate functions.
CREATE AGGREGATE FUNCTION function_name (parameters) RETURNS return_type
BEGIN
      All types of declarations
      DECLARE CONTINUE HANDLER FOR NOT FOUND RETURN return_val;
      LOOP
           FETCH GROUP NEXT ROW; // fetches next row from table
           other instructions
      END LOOP;
END

NOTE cannot use WHERE clause with aggregate function; use HAVING clause instead.

______
Sub-queries

	SELECT * FROM payment
	WHERE payment_amount >
	(SELECT prod_availability FROM product);
	
____
What is an index?

If a query is slow, adding an index can speed things up

CREATE INDEX idx_name ON employee(emp_name);

- look up: compound indexes 
- careless use of functions in joining & filtering clauses often blocks index use.

unique indexes are a part of data integrity
___ 
What is a view?
- a virtual table which you can refer to s you do not have to write same queries again
	
	CREATE VIEW emp_job AS
		
		SELECT e.emp_name, j.job_title
		FROM employee e
		INNER JOIN emp_roles er ON er.emp_id = e.emp_id
		INNER JOIN job j ON j.job_id = er.job_id;
		
		SELECT * FROM emp_job;
	
	DROP view emp_job;
__

Advanced SQL: https://blog.jooq.org/how-to-fill-sparse-data-with-the-previous-non-empty-value-in-sql/


