15/05/2023
===============
SOLID Principles
- The below principles all lead to each other, e.g. single responsibility can be extended to give effect to open/close, and Liskov substitution principle reminds you to write o/c relationships in a better way.

- Single responsibility
	- This is a specific way to design classes

	class Employee{
		private int employeeId;
		private String employeeName;

		private int productId; //  This is irrelevant to employee object
	}

	- "Every object should have a single responsibility and therefore only a single reason to change".
		- A component that follows this principle is "highly cohesive".
		- So for example, a client-facing API is JUST responsible for serving the data; any database connection or mapping data to domain objects should be relegated to another object/layer.
	- Classes should only change for ONE reason: to alterate RELEVANT characteristics to the class. 
		- Do not add business methods to a domain class, e.g. "Payment" class should not contain "debitPayment"; that should belong to "PaymentService" class.
		- If the class is a "View" class, it should only focus on view; if the class is a service class, it should only do that. To couple classes together, you can use the MVC pattern.

- O (open/close)
	 Open for extension; closed for modification.
		- Single responsibility is about the class itself; O/C is about how to extend them.
			- Focuses on inheritance. Inheritance is about maintenance; it aims to make it easy to add features. Ways to add features: 
				- Top down approach: Extending existing classes
				- Bottom up approach: Grouping classes into a new supertype
	- Consider administration privileges - how would you implement it?
	
		class Employee{
			private int employeeId;
			private String employeeName;

		}

		class Admin extends Employee{

		}	

- Liskov substitution rule
	- Also related to inheritance
	- Basically, LSR means your code should be as polymorphic as possible.
		- Embrace using supertypes over subtypes, e.g. 
			public void printItems(Arraylist<String> items)
				is inferior to:
			public void printItems(List<String> items)

	- Consider:	
	class Employee{

	}

	class Managre extends Employee[

	}

	class Admin extends Manager{

	}

	Employee e1 = new Manager(); // This is possible

	e1 = new Admin(); // Possible

	Manager m1 = new Admin(); // Not possible - subtype cannot refer to supertype

- Interface segregation
	- When declaring interfaces, make sure you only add what is necessary. If there are a lot of methods, decompose your interface.

	interface DocumentService{
		public void print();
		public void scan();
		public void fax();
	}

	class PrinterService implements DocumentService{
		// Printer does not need to implement scan or fax.
	}

	- Don't force developers to implement all methods. This keeps code loosely coupled.

- Dependecy Inversion Rule
	- See: https://www.codemag.com/article/0705071/Layered-Architecture-Dependency-Injection-and-Dependency-Inversion
	- NOTE: Inversion arises from an application of OCP and the Liskov Substitution Principle
		- But consier the Observer Pattern, which complies with OCP but not Inversion.
	- A dependency is any other object type which a class has a direct relationship with. The class is described as being coupled to that other type.
		<<<<< Example time >>>>>>
		- Consider the Single Responsibility Rule above for "objects" - look at the below code:
			- Even though the implementation is in one "object", abstractly it is comprised of several "responsibilities", and therefore should be decomposed into several "objects": database connection; data mapping to domain objects, rendering the data, serving the data.
			- These "objects" or "responsibilities" all depend on each other, from high level to low level:
				PopulateGridFrom => MapFrom => GetAllEmployees()
				
		public partial class ViewTightlyCoupled : Page
		{
		   private const string ConnectionString = "data 
		   source=(local);Integrated Security=SSPI;Initital
		   Catalog=NorthWind";
		   private SqlConnection connection;

		   protected void Page_Load(object sender, EventArgs e)
		    {
			if (! IsPostBack)
			{
			 PopulateGridFrom(MapFrom(GetAllEmployees()));
			}
		    }

		    private void PopulateGridFrom(List&lt;Employee&gt; 
		    employees)
		    {
			this.employeesRepeater.DataSource = employees;
			this.employeesRepeater.DataBind();
		    }

		    private DataTable GetAllEmployees()
		    {
		      using (connection = new 
		      SqlConnection(ConnectionString))
			{
			    ....
			}
		    }

		    private List&lt;Employee&gt; MapFrom(DataTable 
		    employeeData)
		    {
			...
			foreach (DataRow employeeRow in 
			employeeData.Rows)
			{
			    employees.Add(MapFrom(employeeRow));
			}
			return employees;
		    }

		    private Employee MapFrom(DataRow row)
		    {
			return
			    new Employee(Convert.ToInt32(
			    row["EmployeeId"]), 
			    row["LastName"]
			    etc etc
		    }
		}
		
		- Any changes to how the dependency is constructed will affect the whole chain! 
				- An "object" should not have to know how to construct its dependecy "objects". 
				- To solve: use dependency injection, so the "object" that needs to rely on other "objects" should not be responsible for creating them; rather, those "responsibilities" (1) should be injected into it (2) in the form of abstractions.
				- This type of loose coupling gives you better separation of concerns because it allows you to apply the Open/Closed Principle (Open for extension; closed for modification) (From: https://blog.ploeh.dk/2010/04/07/DependencyInjectionisLooseCoupling/)
					- Consider: we want to implement caching for 'GetAllEmployees' class
						- Without loose coupling, we would more or less be constrained to adding it to either 'GetAllEmployees' or add another method to 'ViewTightlyCoupled', but both have issues:
							- We would be violating the Single Responsibility Principle (SRP) in both cases.
							- If we implement caching in 'ViewTightlyCoupled', other consumers of 'GetAllEmployees' would not benefit from it.
							- If we implement caching in 'GetAllEmployees', it wouldn't be available for any other database retrieval implementations.
							
						- Solution: implement a interface that extends the 'GetAllEmployees' interface to include caching. We have satisfied both the OCP and the SRP: 'GetAllEmployees' gets new functionality without modifying it. 
						
		IProductRepository repository =
		    new PerformanceMeasuringProductRepository(
			new CachingProductRepository(
			    new SqlProductRepository(), new Cache()
			    ),
			new RealStopwatch()
		    );
		    // Compare to:
		IProductRepository repository2 =
		    new ProductRepository(
			    new SqlProductRepository()
			    )
		    );
		    
		var vm = new ViewModel(repository);
							
		<<<<< Example end >>>>>>	
		
		<<<<<< Alternative >>>>>
		ACTUAL inversion:
		
			public class ViewEmployeesPresenterLowCohesion
			{
			    private IEmployeeView view;

			    public ViewEmployeesPresenterLowCohesion(
			    IEmployeeView view)
			    {
				this.view = view;
				HookupEventHandlersTo(view);
			    }

			    private void HookupEventHandlersTo(
			    IEmployeeView view)
			    {
			       view.Load += delegate { LoadEmployees(); };
			    }
			}
		
		Question: Wrapper class vs Inheritance vs Dependency Injection?
		- Wrapper class is essentially 'decorator pattern'
		- Inheritance: When you know exactly what object you want to extend.
			- NOTE Inheritance violates encapsulation (which is a general data abstraction best-practice approach, compared to SOLID which is a OOP specific best-practice approach). In other words, a subclass depends on the implementation details of its superclass for its proper function. The superclass’s implementation may change from release to release, and if it does, the subclass may break, even though its code has not been touched. As a consequence, a subclass must evolve in tandem with its superclass, unless the superclass’s authors have designed and documented it specifically for the purpose of being extended.
		- Dependency Injection: You know you'll be extending/using classes that meet some basic criteria, but may be more than that or defined by another developer. In that case you set your code to require a base class (or interface) and let the user of your class decide exactly which implementation to extend )see above 'IProductRepository').
		
		<<<<<< Altenative end >>>>>

	- NOTE: Dependency Inversion vs Dependency Injection:
			- Inversion is about (1) de-coupling concrete classes by preventing them from having any direct reference to each other. (2) Each class only depends upon higher-level abstractions. 
			- Inversion is NOT about injecting dependencies; dependency injection is an implementation pattern which can help provide the level of indirection needed to avoid depending on low-level details and coupling with other concrete classes.
		
	Summary of the Inversion principle:
	- High level modules should not depend on low level modules. 
	- Abstractions should not depend on details. Details should depend on abstractions (ie an interface).
		- OR: program to an interface! (See: https://www.baeldung.com/cs/program-to-interface)
			- Originally: drive -> car & drive -> truck;
			- Then abstraction: drive -> vehicle (car extends; truck extends)
			- THEN interface: use Multiple Abstractions (satisfies SRP too) (drive -> drivable + breakable; drivable (car extends); breakable (car + wall extends))
			- The explanation:			
			- First, we directly used the implementing classes from other classes. Usually, we call this method “programming to classes” or “programming to implementations”. It makes the code tightly coupled because there’ll be many dependencies between different classes. This makes the code fragile because when we modify one part of the code, it tends to break things in many unexpected places.
			- Next, we introduced an abstract class "vehicle", which decoupled our classes’ clients from the concrete implementations. We call this technique “programming to abstraction”. But we were still mixing different aspects of the functionality in the same abstraction (SRP!)
			- So we introduce multiple abstractions: interfaces. We call this method “programming to interfaces”. 
				- Note that an interface is also an abstraction. Therefore, this method is the subset of programming to abstractions.
			- With interfaces, on top of decoupling implementations, we were able to decouple multiple concepts.
			- In a nutshell, when we’re programming to interfaces, different business logic are not connected through implementations. They’re connected through interfaces.
		
	- Consider the below:

	class EmployeeService{
		private EmployeeDAOInMemoryImpl employeeDAOInMemoryImpl;

		private EmployeeDAODatabaseImpl employeeDAODatabaseImpl;

		public EmployeeeServiceImpl(EmployeeDAOInMemoryImpl employeeDAOInMemoryImpl){
		}
	}
	
	- The references to specific implementations result in very tight couplling. Both EmployeeService and EmployeeDAO should depend on abstractions.
	- Every object that the class relies on, create it somewhere else and pass it to the class.
	
	


===============
Architecture - Domain Driven Design:
- The domain is mapped by models. They should not contain behaviour, only data (single responsibility principle).
- OOP combines state and behaviour, so models are the 'state', and services are the 'behaviour'.
- Layered architecture: Ensures each layer can adhere to the single responsibility principle
	- But unfortunately, people using layered architectures can still introduce an unnecessary amount of coupling between layers of their application. That's where SOLID comes in.


===============
- Refactoring: Changing existing code WITHOUT changing the functionality. 
===============
JDBC API (Java Database Connectivity)
- API acts as a bridge.
- JDBC specifically provides a set of classes and interfaces for Java applications to connect and execute SQL queries.
- Interfaces:
	- Connection
	- Statement
	- PreparedStatement
	- CallableStatement
	- ResultSet
- Classes:
	- DriverManager
	- Date
- JDBC App steps:
	- Load the driver class and register with DriverManager
		import java.sql.Connection; // For connection object
		// No need for import statement; the below statement is enough
		Class.forName("com.mysql.jdbc.Driver");

	- Establish connect/ create connection object

		Connection con = DriverManager.getConnection("jdbc:mysql://localhost/test","root",""); // This is a static method.

	// jdbc:mysql - this is the protocol
	// localHost - host name
	// test - database name
	// root - database username
	// final field - password

	- Prepare/create courier serivce/statement object

		// Database (test) table: employee (employee_id, first_name, last_name)
		PreparedStatement pst = con.prepareStatement("INSERT into employee(employee_id, first_name, last_name) VALUES(?,?,?));

		pst.setInt(1,100);
		pst.setString(2,"Tom");
		pst.setString(3,"Lee");

	- Execute the statement/query

		pst.executeUpdate(); // This method is used to execute "INSERT,UPDATE,DELETE" commands. Notice "SELECT" is not here, because unlike the other three, "SELECT" returns rows of data, instead of a report of the qty of changes, e.g. 3 lines deleted.

	- Close the established connection.

		pst.close();
		con.close();

===============
Servlets and JSP APIs 
- Servlet is a server-side web component responsible for generating dynamic content.
- Servlet response is in plain  text or HTML.	
- What is an Applet?
	- Downloadable components that enables client-side rendering
- Web server examples:
	- IIS (from Microsoft)
	- Apache Tomcat
- Application servers extend web servers with additional features:
	- Contains a container for web and business components (HTML, Servlet, JSP and EJB)
	- Glassfish, JBoss, BEA web logic
=====
Eclipse IDE
- For "new project" you can select "dynamic web project"
	- This will create the necessary file structure for you.
- "src/main/java" - server-side
	- Need to install Apache Tomcat and direct Eclipse to the server directory.
	- "request.setAttribute("logDate", var)" stores server-side variable in the response.
	- the "request.getResquestDispatcher('newPage.jsp').forward(request,response)" methods will send the new html page to client
- "src/main/webapp" - client-side view; static resources
	- JSP
		- "Scriptlet" is defined by <% %>
		- request.getAttribute("logDate") extracts the data from server response and displays it. 

=========
Applying OOP to web app architecture
- Servlets act as controllers.
- No need to write view because that is taken up by the browser frontend.
- Sessions:
	HttpSession session = 

	and for JSP...

	(Employee) session.getAttribute()

========
Session Managemnt/Tracking
- What is "http" protocol?
	- Stateless protocol: Server discards client-specific information once response is sent.
- Session tracking: Server retains client information, e.g. remembering basket information.
	- Types of session management:
		- Cookies: Plain text containing user information, e.g. IP address, user password. (Stored in client side!)
			- "Cookie" is a predefined class in Java:
				Cookie c1 = new Cookie("userName", "Aaron")
				response.addCookie(c1); 
				Cookie[] cookies = request.getCookies(); // Receives an array of cookies
		- Session object: Created and maintained in server-side. 
			- The session ID and associated data could be stored in database; usually encrypted.
				- Session hijacking: Impersonating another user via accessing their session ID. 
			- Example:
				// Servlet 1
				HttpSession session = request.getSession(true);
				session.setAttribute("username","Aaron"); // "username" is called "session label"

				// Servlet 2
				HttpSession session = request.getSession(true);
				String username = (String) session.getAttribute("username","Aaron"); // Return type is object so need to typecast it.

		- URL rewriting
		- Hidden fields: Not visible in webpage, but their values can be sent to the server. 	
	- NOTE: Each browser is a client. So session is linked with specific browser, i.e. if Chrome pings a server, the data there is not reflected if Edge pings the same server.

