05/06/2023
===============
Java vs Python
- Java is robust enough for enterprise applications:
	- Better memory management (incorporates aspects of static memory allocation) (see below)
	- Better exception handling
		-Java has two types of exceptions: checked and unchecked. Checked exceptions HAVE to be handled. Unchecked exceptions do not and can be thrown anywhere in the code. 
			- Python only has unchecked exceptions.
			
			if not 5000 < salary < 15000:
    				raise SalaryNotInRangeError(salary)
				
		- Java allows a particular method to throw an error, instead of handling the error within the method. Python 'raise' does not allow that. This makes for better readability because you know what types of errors a method can throw.
		- Notes:
			- Python 'raise' instead of 'throw' exceptions.
			- try-catch-finally (Java) vs try-except-finally/else (Python)

	- Better code safety: static typing; protected variables.
			
- Multithreaded
- SECURE: All java code must be run by the JVM, which includes its own security checks.
- Portable
==========
Language features:
- Value Types vs Reference Types distinction:
	- In C, which is a value type langauge, a variable is a place in memory, whereas a pointer refers to a place in memory, and the place it refers to can change over time. So consider:

	a = 1
	a = 2

		- 'a' is a memory location that stores the value 1, then is updated to store the value 2.

	- In Python, 'a' starts as a reference to an object with the value 1, then gets reassigned as a reference to an object with the value 2. 
		- Both objects continue to coexist, even though 'a' does not refer to the first one anymore; in fact, the objects may be shared by any number of other references. 

- How does this affect language features?
	- Passing variables to functions:
		- Function parameters are object references, passed by value. 




	- In CPython, only strings of length 1 are interned in the pool, i.e. a='num'; b='num'; id(a)==id(b) # true

- Comma operator: 
	a = 1
	b = 2

	a , b = b , a // Swaps
- Equality vs identity
	- Equality checks value
	- Identity checks memory location

============
Collections/Data structures

Built-in Collections:
- List  
	Mutable
	Store any data type
	Created using square brackets
	Allow duplicates
- Tuples 
	Immutable
	Store any data type
	Allow duplicates
	Created using round brackets hashable
- Dictionary
	Store Key-value pair
	immutable
	Keys cannot beduplicates
	ordered creates using brackets
- Set
	Immutable unordered unindexed
	doesn't allow duplicates
	created using curly brackets


User-Define Collections:
- e.g Array (same data type), Stack (LIFO), Queue(FIFO)

==========
- Tuples are preferred for heterogeneous collections (similar to C structs); lists are preferred for homogeneous collections (similar to C arrays). 
- Floating point arithmetic in Python is handled differently than Java:

difference = 1.1 - 0.9
difference == 0.2 # returns False!

- Dictionaries are ordered since Python 3.6, but that is incidental to CPython's implementation; to GUARANTEE insertion order, you should use OrdereedDict from Python Collections. THEN Python 3.7 made it a langauge feature.

==========
Functions
- What is a function definition?
	- 
- Return value annotation
	- Started in Python 3.0

==========
Python opp

- Single Inheritance

class A:
	<body>
	
class B(A):
	<body>

-Multiple Inheritance

class A:
	<body>
	
class B:
	<body>
	

class C(A,B):
	<body>

- Multi-level

class A:
	<body>
	
class B(A):
	<body>
	

class C(B):
	<body>
	
- Hierarchial Inheritance

class A:
	<body>
	
class B(A):
	<body>
	
class C(A):
	<body>

- Hybrid Inheritance - Combination of Multi-leval and multiple

class A:
	<body>
	
class B(A):
	<body>

class C(A, B):
	<body>



