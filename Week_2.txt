24/04/2023
===========
3-tier architecture: 
- Client/browser(HTML/CSS/JS)
- Web application server 
- Database/Enterprise Information Systems Tier(EIS)
(If you include cloud components, then it would be 4-tier/5-tier architecture)

Web Servers: Apache Tomcat; Glassfish; JBoss; WebLogic 
- Web Tier: Java Servlet; Java Server Pages (JSP);Java Server Faces (JSF); this layer is the equivalent of React.
- Business Tier: EJB; SpringBoot; this layer applies business logic to data collected by the Web Tier.

OOP:
- Objects are reusable, non-sequential, and maintainable.
- Compared with procedure programming.

Java vs Python
- Java is robust enough for enterprise applications:
	- Better memory management (incorporates aspects of static memory allocation) (see below)
	- Better exception handling
		-Java has two types of exceptions: checked and unchecked. Checked exceptions HAVE to be handled. Unchecked exceptions do not and can be thrown anywhere in the code. 
			- Python only has unchecked exceptions.
			
			if not 5000 < salary < 15000:
    				raise SalaryNotInRangeError(salary)
				
		- Java allows a particular method to throw an error, instead of handling the error within the method. Python 'raise' does not allow that. This makes for better readability because you know what types of errors a method can throw.
		- Notes:
			- Python 'raise' instead of 'throw' exceptions.
			- try-catch-finally (Java) vs try-except-finally/else (Python)
			
- Multithreaded
- SECURE: All java code must be run by the JVM, which includes its own security checks.
- Portable


- Specifications:
  - Java Standard Edition (SE): aka 'Core Java'. Used for desktop/console applications.
  - Java Enterprise Edition (EE): Used for business applications. 
  - Java Mobile Edition (ME): Used for mobile applications.

====================
Datatypes
- Primitive vs object type vs reference type
- Primitive types:
  - Byte (a byte is 8-bits; so the values it can represent is 2^8 bits = 256 values). The actual value range is -128 to +127.
  - Boolean: Size of actual boolean value depends on the operating system.
  - Char: 2 bytes - one is for ASCII; the other is for UNICODE.
- Object types:
	- Java arrays MUST contain the same type, AND you must declare the array size. That is why it is called a 'static array'. To create an array with dynamic size, use 'ArrayList'. e.g.
	
	anArray = new int[10];
	int[] myNum = {10, 20, 30, 40};
- Reference type are variables that refer to an object on the heap.
	- If you assign an object to another variable, the reference is passed.
	e.g. Book b1 = new Book();
		 Book b2 = b1;

	- b1 and b2 point to the same object. 

Variables:
- Local: Method-specific variables.
	- Local variables do not get default values. Their initial values are undefined. Before you can use local variables they must be initialized.
- Instance: Object-specific variables.
- Static: Bounded to the class; aka 'shared variable' across all objects of the class. Initialised at program execution time, when the class is loaded into memory (so only once).
	- Because static members are class-level and not object-level, to access them there is no need to initialise an object of that class first; you can simply call the variable from the class. E.g.
		
		class A{
			static int x = 1;
		}

		class Call{
			public static void main(String[] args){
				System.out.println(A.x);
			}
		}

Java type coercion:
- e.g.
	int a = 100;
	long b = 20;

	int c = a + b;

	- Java does type coercion based on the variable with maximum memory. That is why it is called 'widening conversion'.
	- In this case, the variable 'b' has the most memory at 8 bytes (because long).
	- Therefore, the above equation will return an error because the result is a long type but the variable has only been assigned 4 bytes (int type).
- NOTE: Strongly typed languages do not allow for type coercion, but Java is a strongly typed language, so why is the above allowed? This is because behind the scenes, the compiler will turn implicit coercion into explicit, e.g. a + b => long(a) + b

Java type casting:
- NOTE: Type casting can be applied to compatible data types as well as incompatible data types, whereas the compiler will only recognise implicit type coercion with compatible types.
- Also, the destination data type can be smaller than the source data type. That is why it is 'narrowing conversion'.

Java operators:
- Unary operators: e.g.
	int a = 10;
	int b = a++;
	System.out.println(a);
	System.out.println(b);

- In the above example, the program will return 11 then 10.
- This is because postfix version evaluates to the origin value, while prefix version returns the new value.

- Boolean operators:
	int c = a & b;
	- 'a' and 'b' is converted to binary, and boolean algebra is applied to them.

- Also be aware of operator precedence:
	System.out.println(++a+b);
	- Unary operator '++' will be applied first to 'a', and because it is prefix it will return the new value. Then that value is added to 'b', yielding the result 22.

Java control flow:
- NOTE Java 'enhanced for' loop => 'for-each' loop over collection. However, you can only access the array values, and cannot reassign them.
	for (type variableName : arrayName) {

	}

OOP
1. What is a class?
- A user-defined datatype
- Syntax:

	[access-specifier] class <ClassName>{
		
	}

2. What is an object?
- A combination of state and behaviours.
- The process of creating objects from a class declaration is called INSTANTIATION.

3. What is a method?
- A block of code that can be declared once and called many times.
- A method has 'worker-manager association':
	- Method definition = Worker
	- Method call = Manager
		- e.g. range(0,5) - this is CALL BY VALUE.
- A 'function' is a block can exist on its own. THerefore Java does not have functions; all methods must exist within a class.
- Method syntax:

  [access-specifier] return-type <methodName>([parameter-list]){
  
  }
- Static methods: 
	- They can only access static variables and other static methods.
	- Just like static variables, static methods are EXECUTED only once, when the class is loaded into memory.
	- Static blocks always execute first before the main() method in Java because the compiler stores them in memory at the time of class loading and before the object creation.
		- This is why 'main' method must be static. 
		- Therefore static methods do not have (or belong to) any instance you cannot use the "this" reference. 

4. OOP design in Java:
Static Class
Final Class
Abstract Class
Concrete Class
Singleton Class
POJO Class
Inner Class

- Model class/ POJO (plain old Java Object) class:
	- Contains private variables and their Getters and Setters.
		- Setters allow for mutability.
		- Javabeans standard forces you to use getters/setters.

5. OOP thinking:
- 4 pillars of Object-oriented programming:
	- START WITH Encapsulation (data and methods together)
	- Inheritance
	- Abstraction
	- Polymorphism
- https://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html


- Constructor:
		- Has the SAME NAME as the class in which it is declared.
		- It is called IMMEDIATELY upon creation of an object.
		- Lacks return type. This means DO NOT declare 'void'; ie it does not follow method syntax. While void doesn't return a value in the strictest sense of the word, it is still considered a return type.
	- Constructor method is responsible for creating an object from a class template. So if you do not define a constructor in your class, the compiler will add one for you. 
	


Variables:
- Global, local, instance variables (declared using 'this.')
- Local variables get highest priority




=====
Method overloading
1. Two methods with the same name, but different parameters. 'Different' means two things:
- Number of paramters are different.
	e.g. Book b1 = new Book();
		 Book b2 = new Book("Harry Potter");

- Parameter datatypes are different.
	e.g. System.out.println(100);
				   .println("Hello");
				   .println(false);

3. Constructor overloading
- Multiple constructor methods that create objects different based on the arguments passed.
- Technically any constructor declaration is already overloading, because all classes inherit from 'Object' class, and that class has its own constructor.  
-  When a class does not have a constructor, the compiler adds a default constructor that takes no arguments, and in the first statement, the compiler inserts a call to super which calls that class' constructor. If the super class constructor has parameters, then you need to provide a constructor with arguments. Object does have such a constructor, so if Object is the only superclass, there is no problem.
	- No paramaters vs parameterised constructors
- Invocation of a superclass constructor must be the first line in the subclass constructor.
- Super class constructor must be invoked first. 
- What if you want your abstract class to have multiple constructors, e.g. abstract <Plan> extended by <Shopping plan>, <Commercial plan>, <Study plan>?
	- Don't do it. Use design pattern.
	- Static Factory Method: "Static factory method is simply a static method that returns an instance of a class." Effective Java, Joshua Bloch

2. Overloadinng is an example of 'polymorphism'
- The '*' symbol in C/C++ can be used as a pointer, or for multiplication.

Inheritance:
- What's the point? Reusability, maintainability and reliability (base class will already be tested).
- Inheritance represents child class "is-a" relationship between parent class, e.g. 'Dog' is-a 'Animal'.
- Creating a new class from an existing class.
	- The inherited class is called a 'child class'. The existing class is called a 'super/parent' class.
		- In C++, the inherited class is called 'derived class'; the parent class is called a 'base class'.
- Multi-level inheritance:
	class A{};
	class B extends A{};
	class C extends B{};

- Hierarchical inheritance:
	class A{};
	class B extends A{};
	class C extends A{};

- NOTE Java does not support multitple and hybrid inheritance.
	- Multiple inheritance (C++ and Python supports this):
		class A{};
		class B{}; 
		class C extends A,B{};
	- Hybrid inheritance: Combination of multi-level and multiple inheritance.

- Subclass inherits private variables of parent, BUT it cannot access it directly. It must use the parent's accessor methods.
	- Use 'super' method to refer to parent class members, e.g. super.getVariable('Var');

NOTE polymorphism is to do with CONCRETE classes; abstraction is to do with ABSTRACT classes and interfaces. 
- 
- Thus the idea of "design by contract" is to do with "abstraction", not "polymorphism".

	- NOTE this is different from "class dependency" - see week 4.
Abstraction in OOP
- Abstract class: The process of creating a GENERALISED class with properties and methods common to its subclasses, e.g. 'Animal' class is an abstraction of 'Mammal', 'Reptile' classes etc. 
- Abstract class can contain default method implementation. Otherwise it will have to declare abstract methods (see below).
- Abstract classes CANNOT be instantiated - it needs a concrete implementation through subclasses that extend and implement it. Therefore abstract classes do not appear in the heap.
- An abstract class CAN refer to the subclasess that are extending it. THIS IS AN EXAMPLE OF POLYMORPHISM. To get the subclass, use 'this' keyword to refer to the current object, then call 'this.getClass()' to get the subclass that is created during runtime. 

Fully implemented vs abstract method:
- For abstract classes, sometimes the method does not make sense at the abstract level but only gets implemented at the child level. So in the abstract class, we only add an abstract method:
	abstract void do();
=========
Annotations 
- Have no direct effect on the operation of the code they annotate. Their uses are:
	- Information for the compiler
	- Compile-time and deployment-time processing: Software tools can process annotation information to generate code, XML files, and so forth.
	- Runtime processing: Some annotations are available to be examined at runtime.


- '@' symbol, aka 'Decorators' in Python.
- The 'Override' annotation is just a comment - the compiler does not care if you have '@Override' or not. But it is good practice!
- The same method can appear both super and sublass with identical name and signature. The method that will run depends on which object is called.
- 'Override' vs 'overloading': 'Override' is a parent/child class concept part of 'polymorphism'; 'overload' is when you wish to support different types, but the functionality of the method IS THE SAME. 
	- Polymorphism is the ability of one type, A, to appear as and be used like another type, B. So, method overloading as such is not considered part of polymorphism, as the overloads are defined as part of one type.
- The point of overriding is 

========
What is an interface in Java?

 Syntax:
 
	[access-specifier] interface <InterfaceName>{ //interface can be public or package-scoped
		
		// List of abstract methods - all methods are public by default
		
		// List of PUBLIC, STATIC, FINAL variables
	
	}
	
- It is a specification of method signatures. You can declare variables in them BUT they must be constant, i.e. public, static, AND final.
- Java interface can only have ABSTRACT Methods (BUT since Java 8 things have changed - interfaces can also have default and static methods).
- A class can implement more than one interface at a time. This is how Java supports multiple inheritance (remember, Java does not support multiple inheritance THROUGH CLASSES, but can achieve the same functionality through interfaces).
- If a class implements an interface it must provide the implementation for ALL abstract mthods which are defined in the interface.

========
- How is interface different from abstract class?
	- Abstract class can contain both abstract and concrete (i.e. with implementation) methods AND constructors; 
	- Abstract class also contains variables.
	- 

What is the point of an interface?
- Interface is like a contract; you MUST implement all methods. 
- Interface is the specification; it allows for O/C principle + Liskov Substitution principle
- When to use interface vs class?
	- interfaces do not specify behavior (implementation), only characteristics (the 'specification' or 'API'). 
	- Inheritance can handle both. You can gain the superclass behaviour, or redefine existing behaviour of the superclass.
	- Interfaces vs abstract classes:
		- Abstract classes have no restrictions on field and method modifiers, while in an interface, all are public by default. 
		- We can have instance and static initialization blocks in an abstract class, whereas we can never have them in the interface. 
		- Abstract classes may also have constructors which will get executed during the child object's instantiation.
=========
BEST PRACTICE: Do not include business logic methods in class; include them in an interface and leave it to the subclass to implement it.
- 'Interface segregation' is the 'I' in SOLID principles.

=======
Java collections framework
- Allows for an object that represents a group of objects, NOT primitive types (that would just be a normal array).
- Provides a set of interfaces such as:
	- List: Index-based collection; duplicates allowed.
	- Set: Hash-based indexing; duplicates not allowed.
	- Map: Key-value pairs (aka Python dictionary)
- Also contains implementations of the above interfaces:
- List interface:
	- ArrayList: Best suited for READ opertaions, not good for ADD or REMOVE.
	- LinkedList: Node-based collection, where each node maintains the addresses of adjacent nodes. So not good for READ, but good for ADD and REMOVE.
	- VectorList: Synchronised objects; good for thread programming. 




===============
Java Memory Management

- no need to allocate or deallocate memory during execution
		- Avoids memory fragmentation, as memory blocks are contiguous and aligned.
		- Reduces risk of memory leaks, as the memory is automatically freed when the program ends.
		- Developer in java cannot go beyond the allocated memory. In java, when the memory is consumed beyond the allocation, it throws an error.
		- BUT 
			- Inflexible and wasteful, as you have to specify the maximum amount of memory you will need, regardless of the actual usage. 
			- It also limits the scalability and modularity of your program, as you cannot dynamically create or destroy objects or arrays.
			- May cause stack overflow.
			
xx3. Call Stack and Memory Heap
- Heap and stack are generic terms for ways in which memory can be allocated. It is an implementation of a MEMORY MODEL.
	- Memory models came into existence with high-level programming languages. Before they came along, people used assembly languages, or other means of programming which for the most part used a memory model indistinguishable from the computer's real memory. This is 'flat memory model'. See types of memory models: https://www.cs.auckland.ac.nz/~alan/courses/os/book/4.How.02.memorymod.pdf; http://canonical.org/~kragen/memory-models/; https://www.memorymanagement.org/index.html
	- History of the use of stack-heap architecture: https://www.sigcis.org/files/A%20brief%20history.pdf
	- Memory management in stack is done in LIFO manner whereas it’s more complex in Heap memory because it’s used globally. Heap memory is divided into Young-Generation, Old-Generation etc, more details at Java Garbage Collection.
	- Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with "all" other heap accesses in the program.

- How are stacks and heaps related to programming languages:
	- Heaps are bad at fast memory allocation and deallocation. If you want to grab many tiny amounts of memory for a limited duration, a heap is not your best choice. A stack, with its super-simple allocation / deallocation algorithm, naturally excels at this (even more so if it is built into the hardware)
	- Stacks are adopted by many programming languages because they are perfect fit for scoped variables, e.g. create new stack frame at the beginning of a function, and discard it when leaving.
		- Language implementations without a stack are typically implemented using the continuation-passing style. See: https://stackoverflow.com/questions/796211/what-does-it-really-mean-that-a-programming-language-is-stackless
		- From a formal methods perspective the heap and stack correspond to the "Store" and "Kontinuation" of a CESK machine (Control Environment Store Kontinuation.)
	- Local Variables that only need to last as long as the function invocation go in the stack. In most languages it's critical that we know at compile time how large a variable is if we want to store it on the stack.
	- The heap is used for variables whose lifetime we don't really know up front but we expect them to last a while. In many languages the heap is garbage collected to remove objects that no longer have any references.

- How are stacks and heaps related to OOP:
	- Stack-and-heap is linked to the history of OOP: During the creation of ALGOL, the creators realized that an inner function can be contained within a function with a local variables, and the inner function can access the local variables of the outer function. This was implemented by moving the variables to the heap from the stack (https://youtu.be/t86v3N4OshQ?t=846).

- Process:
e.g. 

public void Method1()
{
    int i = 4;
    int y = 2;
    class1 cls1 = new class1();
}

'i = 4' goes into the stack.
'y = 2' goes into the stack; stack is LIFO, so this sits on top of 'i = 4'
'cls1' REFERENCE goes into the stack; 'cls1' object goes into the heap.
'}' terminates the method. Stack is emptied; 'cls1' remains in heap.


- Each thread gets a stack, while there's typically only one heap for the application.
	- A thread is a sequential flow of control. This sounds like processes! But...
	- The difference: threads run in a shared memory space within ONE process;  processes run in separate memory spaces.  (See history: http://www.serpentine.com/blog/threads-faq/the-history-of-threads/)


The reason why the stack / heap distinction is important is because of scope.

struct S { ... }

void f() {
    var x = new S();
    ...
 }
 
Once x goes out of scope, the object that was created is categorically gone. That is only because it is allocated on the stack, not the heap. There is nothing that could have gone in in the "..." part of the method that can change that fact. In particular, any assignments or method calls could only have made copies of the S struct, not created new references to it to enable it to keep living.

class C { ... }

void f() {
     var x = new C();
     ...
}

Totally different story! Since x is now on the heap, its object (that is, the object itself, not a copy of it) could very well continue to live on after x goes out of scope. In fact, the only way it won't continue to live is if x is the only reference to it. If assignments or method calls in the "..." part have created other references that are still "live" by the time x goes out of scope, then that object will continue living.



