24/05/2023
=========
- Eclipse initialisation:
	- Create new Maven project
	- Check the 'Create a simple project' option (skip archetype selection)
	- Sample project config:
		- Group ID: com.ab
		- Artifact ID: first-maven-project
		- Versioning: 0.1.1 SNAPSHOT
		- Packaging: jar
	- To convert an existing project into a Maven project: right click, select 'Configure', select 'Convert to Maven Project'

Background:
Build tools + Project Management Tools
- Eliminates errors in deployment process:
	- Compilation and creation of artifacts (e.g. executables such as .jar)
	- Dependency versioning
	- Run tests
	- Organises static and dynamic files in separate places
- Examples:
	- Maven
	- Gradle
	- Simple Build Tool (SBT - for scala)

Maven Project
- Maven vs Maven project: Each 'Maven project' has its own POM file. We can configure 'Maven' build tool to build multiple projects.
	- A multi-project repository contains a POM file in the root directory. The individual projects are listed in a modules section.
- Domain concepts:
	- Artifact: The output generated after a Maven project build. This element can be integrated into another project, e.g. war file.
	- Coordinate: The groupId, artifactId, and version of a given artifact.
- Coordinate setup - GAV:
	- Group ID (represents domain name)
	- Artifact ID: Pointer to file/project/executable; within the group, it identifies a project.
	- Version (indicates the expected/ available version)
	- The above is simplified as (GAV)
- The build file is "pom.xml" (Project Object Model)
	- Includes: 
		- Configurations: Compiler version 
		- Dependencies:  
		- Plugins:
- Dependencies
	- On the 'mvnrepository' website, you can find the dependency definitions for different packages. You can copy them and paste in your pom.xml file.

	<dependencies>
		...
		<dependency>
			<groupId>com.stackoverflow...</groupId>
			<artifactId>artifactId...</artifactId>
			<version>1.0</version>
		</dependency>
		...
	</dependencies>

	- NOTE within 'dependency' section of 'pom.xml', there is also a 'scope' section. This is for  transitive dependencies.
		- They are the dependencies of your project's direct dependencies.
		- Dependency scopes can help to limit the transitivity of your dependencies. 
		- They determine when the dependency needs to be downloaded: compile-time, runtime, testing

CI/CD:
- Continuous integration: For each new integration into codebase, ensures all steps are followed
	- Compile
	- Code review/test
	- Code install
- Continuous deployment: Responsible for delivering artifacts to different environments
	- QA environment, or UAT, or prod (various release stages)
	- Allocating space in the new environment to host the artifacts is called 'provisioning'.
- Jenkins:
	- Produces report after each step 
========
Testing:
- Unit -> Integration -> System/end-to-end -> User acceptance
	- To move up the testing pyramid, the lower layers need to pass first, i.e. pass unit tests before proceeding to integration test.
- Different testing lifecycle models:
	- V model
	- SDLC phase-by-phase 
- Manual, automated, white box, black box testing
	- Manual testing: Test use cases you have come up to see if they meet functional requirements; from user's point of view, NOT the developer's.
	- Automated testing: Use of testing tools
	- White box testing: Code is visible (e.g. unit and integration tests)
	- Black box testing: Cannot see code (done by test engineers/QA) (test functional requirements)
		- QA testing specifically: Identifying and finding bugs and reporting them to developers to fix.
		
- Unit testinng
	- A 'unit' is scoped to method/class/object/SQL query.
	- Characteristics:
		- F - Fast (fine-grained testing because code gets deployed often)
		- I - Independent
		- R - Repeatable (the same test could be run multiple times, depending on the SD stage)
		- S - Self-validating (either pass/fail; Make sure there is no 3rd possibility - 'error'!)
		- T - Timely
- Unit testing
	TDD Life Cycle
	- RED: Start with failing test
	- GREEN: Write code to make the test pass
	- REFACTOR: Change code without changing functionality.

- Setup:		
	- Test suite class: groups all test case classes together
		- This is because it is not good practice to include all test case methods in one test case class.
		- e.g. for ShoppingBasketService, create separate classes for registeredUser and unregisteredUser.
	- Testing scope:
		- Different 'arrangements' (e.g. different dummy data supplied to constructor) 
		- Different methods
		- For each method, different inputs
		- You don't need to cover all edge cases; that is QA team's job. QA will cover not just functionality, but also performance, stress test etc
	- Add '@Test' annotation above test method.
		- This enables IDE to run the single unit test. Right click in the scope within the method and select 'Run as'
		- Start with determining the test cases
		- Steps: The 'triple A model'
		
		import static org.junit.Assert.*;
		import org.junit.jupiter.api.Test;

		public void testAddition(){
			// Step 1 - Arrange: create dummy object and supply it with dummy data (empty constructor/no dummy data in this case)
			Calculator cs = new Calculator();
			
			//Can also store expected value in 'arrange' section
			int expected = 3;
		
			// Step 2 - Act: call the METHOD you want to test
			int result = cs.add(1 + 2);
			// Methods that return 'void' need to be tested another way!

			// Step 3 - Assert: there are different options, e.g. valid input should retun notNull/equals/ArrayEquals; invalid input should return null
			assertEquals(expected, result);
		}
		
		
	- Best practices:
		- DO NOT code the whole test method immediately. Write the logic incrementally.
			- You want your test to fail for the first few times. This ensures you only add code that is necessary, instead of writing extra logic.
			- Once the test passes, then refactoring your test logic.
		
=====
Test Doubles
- You cannot test an interface directly as it needs to be implemented.
- So create a mock object based on the interface (objName.class)
	- THus interfaces can be used for mocking, in addtion to enabling SOLID
- Methodologies:
	- Mock object: Mockito, JMock, EasyMock, PowerMock
	- Stubs
	- Spy

Test Doubles, aka dummy objects
- Purpose: It is used to set up a proper run of the unit test code
- Why are we not using real objects:
	- TDD approach: test first, before you've even coded up the real objects. (do NOT use legacy approach, which is code first, test later)
	- Also useful in cases where there is a lack of: real collaborator, real implementation, or external resource or if the external object is nondeterministic.
	- For example: lack of internet connection, lack of production database authorisation etc.
		- Opposite of 'integration testing': testing how modules communicate with each other, instead of the module's internal behaviour. This you NEED real collaborator.
			- HINT: If you test class only imports testing library, it is probably a unit test instead of an integration test.
			- What if your module integrates with another module, e.g. customer and payment details? 
				- Test individual components first; then integrate them and test again.
		- For unit testing, you would want to disable connections to external modules, e.g. stop service layer from connecting to DAO layer (prevents unwanted changes to database, also to remove errors from external factors such as network connection etc)
			- If all your unit tests pass, but when you plug your app into real implementations and something fails, you have isolated the cause!

Mocks and Stubs
- Mocks are used to isolate modules for unit testing/create isolated environment.
	- Mocks are used when actual object (i.e. an implementation of an interface) are not available, or if those objects violate the rule above (i.e. go beyond the module/layer)
- Stubs are artificial expectations. They enable you to test an interface without an actual implementation.
	- They go hand-in-hand with mocks.
	- Stubs set expectations. This means when a mock object is used to call a method, what should be the return value?

Example:
- Database is 'collaborator'
- Test: DAO layer without actual database connection

@ExtendWith(MockitoExtensions.class)
public class EmployeeDAOTest{
	public void testRegisterEmployee(){
		// Step 1 - Arrange
		EmployeeDAO dao = mock(EmployeeDAO.class); // Mock object

		Employee e = new Employee(1,"Tom","Lee");

		// Stub object - sets expectations
		when(dao.registerEmployee(e)).thenReturn(e);

		// Step 2 - Act
		Employee actualResult = dao.registerEmployee();

		// Step 3 - Assert
		assertNotNull(acutalResult);
	}
}

public class EmployeeServiceTest{

	@Test
	public void testRegisterEmployee(){
		EmployeeDAO dao = mock(EmployeeDAO.class);
		
		EmployeeService ser = new EmployeeService(dao);
		//Or if no actual implementation: EmployeeService ser = mock(EmployeeService.class);

		Employee e = new Employee(1,"Tom");

		when(dao.registerEmployee(e)).thenReturn(e); // NOTE we are only stubbing DAO layer, not SER layer
	
		Employee actualResult = ser.registerEmployee(e);
	}

}
=======
Testing Best Practices
- Test case methods are self-explanatory, e.g. findMaxInArray
- Consider using Hamcrest library
- One 'assert' per test case method
	- Keeping it to one statement isolates the exception that is raised if it fails.
- Write guard assertions that suit the context:
	- They ensure certain preconditions are met.
	- E.g. testing a method that deletes item from collection
		- FIRST, make sure that item exists in the collection!
		- THEN you assert if the result is true.
			- In this case, multiple asserts are allowed because they are have the same goal.
- Use parameterised tests where possible
- Identify the speed of the tests
	- Some tests run faster than others.
	- Maven "Surefire" plugin
		- The slower tests are run during the 'nightly build'
- Tests must deal with raised exceptions of methods.

Code coverage report:
- You should aim to test every line of code.
- TDD ensures you will have tested 90% of code
- In eclipse: right click, select 'Coverage As', select 'JUnit'.
- NOTE: DevOps team are the ones who will read this report
- Code coverage metrics:
	- Statement
	- Decision
	- Branch
	- Condition
	- Finite State Machine
========
What is class dependency?
- If a class has a field or member variable which is a type of another class.
	- It is a 'has a' relationship.

	class Address{

	}

	class Employee{
		private Address address; // Without 'address' object, the design of the 'Employee' class would be incomplete
	}

- Dependency injection: The process of supplying an object into another class. Types:
	- Field injection: Entry point is at variable level
	- Constructor injection: Entry point is at constructor level
	- Setter injection: Entry point is at setter level

	class Employee{
		@Inject // Dependency injection annotation for the benefit of frameworks
		private Address address; 

		public Employee(Address address){ // Constructor injection

		}

		public void setAddress(Address address){ // Setter injection

		}
	}

Spring Framework 
- Used for supporting dependency injections. It is a DI or IoC (inversion of control) tool.
	- Spring framework acts like "factory" pattern in providing objects to your code - it takes over control of your application. 
- It can create, maintain object lifecycle, kill objects. The developer does not have to set up or configure the infrastructure and can focus on application logic.
- Spring modules:
	- Spring Core 
	- Spring Beans
	- Spring Context
	- Spring JDBC
	- Spring Data JPA (Java Persistence API)
	- Spring AOP (Aspect Oriented Programming)
	- Spring Security
	- Spring Cloud
- Spring Core: The foundation of all other Spring modules - everything is pre-configured, developers do not interact with this module.
- Spring Beans:
	- Bean is an object/component similar to Java model classes.
	- They are maintained by Spring.
- Spring Context: 
	- Provides a set of interfaces and classes which are used to access Spring Beans.

What is Spring Boot?
- It is an extended version of Spring framework. 
- It is for 'better bootstrap'.
- Additional features to Spring framework:
	- Bootstraping: Enables auto-configuration
	- Provides embedded server for web applications. (Default is a TomCat server) 

Configuring Eclipse for Spring Boot:
- Plugin needs to be installed via 'marketplace'. Search in 'Find' section for 'Spring Tools 4'.
- Select 'file', 'new projet', search for 'Spring'. Use 'Spring Starter Project'.
- The next page will show 'https://www.start.spring.io' - that is the 'Spring initialiser'. Eclipse will download a zip file from that website for spring settings. The sections below are for maven configs.



What is Spring Configuration?
- Instructs Spring to create objects from Bean/model/domain classes.
- Types:
	- XML based: 
		- XML for for storing and transferring data.
		- HTML is for rendering content. 
	- Annotation based (aka Java based)

Project example:
- Put all your models in a package conveniently titled 'com.ab.beans'.
	- But these classes are just plain java objects for now; see next point for Beans.
- Create a 'com.ab.configs' package to contain your spring configs.
	- Each spring config class MUST contain '@Configuration' annotation.
	- When you create an object WITHIN a spring config class, they are managed by the spring framework.

@Configuration
public class SpringConfig{	
	@Bean
	public Employee e1(){
		Employee e1 = new Employee(1,"Alex");
		return e1;
	}
	
	public Address address1(){
		return new Address("East London","Haggerston");
	}
}

- In order to use spring config and its bean definitions, we also have to create an application context in your 'main' class:

	public static void main(String[] args){
		SpringApplicationrun(SpringDemo1Application.class, args);

		//Step 1: Create an application context
		ApplicationContext context = new AnnotationConfigApplicationContext(Springconfig.class,Springconfig2.class); // 'Springconfig.class' is the 'SpringConfig' class in the previous bullet point! You can add more than one config class.

		//Step 2: Request the required objects/beans
		Employee e1 = (Employee) context.getBean("e1");
		
		e1.setName("Alex");

		Address adr1 = (Address) context.getBean("address1");

		Employee e2 =  (Employee) context.getBean("e1"); 

		e2.setName("Tom"); // This will not be 'Tom' - by default Spring creates singleton objects. Need to create 'prototype' scope instead.

		// If you add '@Scope("prototype") to the 'SpringConfig.e1' method
		// @Bean
		// @Scope("prototype");
		// public Employee e1(){
		Employee e3 =  (Employee) context.getBean("e1");
	}

Types of Spring Bean Scopes:
- Singleton: One object per application session
- Prototype: New object created per 'getBean()' request
- Request: Web-related
- Session: Web-related
- Global-session: Web-related

Dependency Injection:
public class Employee{
	
	@Autowired // Field level DI; no need to write setter method, Spring injects matching object automatically. What if in springconfig contains two Beans of the same type? See below
	private Address address;

	public void Employee(){
	}
}

- IF there are more than one bean in the same springconfig file, to avoid error, you can use '@Primary' annotation.

	@Bean
	@Primary
	public Address addr1(){};

	@Bean
	public Address addr2(){}

	- Or you could use '@Qualifier' annotation in the field
public class Employee{
	
	@Autowired 
	@Qualifier("addr2")
	private Address address;

	public void Employee(){
	}
}

- How about lists of objects?

public class Employee{
	
	@Autowired 
	private List<Address> address;

	public void Employee(){
	}
}

	- If you have multiple beans of the same type, Spring would inject all objects.
	- What if you want some, not all, objects of 'Address' type?
	- You would define the list as bean, AND use a qualifier in the dependency-side to refer to the specific 'list' bean:

	// The springconfig class:
	@Bean
	public List<Address> addressList(){
		
	}

	// The class with dependency:
	@Autowired
	@Qualifier("addressList")



How does Spring work?
	- Client (in this case the Java program), sends a request to Spring framework via 'context.getBean'. 
	- Spring finds the object and supplies it back to the client.
	- Sort of like a factory!

- When right-clicking on the project, select 'Run as Spring Boot Project'!!


